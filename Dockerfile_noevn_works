FROM pytorch/pytorch:2.8.0-cuda12.9-cudnn9-runtime

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    git \
    curl \
    build-essential \
	python3-opencv \
    libmapnik-dev \
    mapnik-utils \
    python3-mapnik \
    libmapnik-dev \
    openjdk-17-jdk-headless ca-certificates-java \
    && rm -rf /var/lib/apt/lists/*

# Install Openslide and large_image with pip
RUN apt-get update && apt-get install -y --no-install-recommends openslide-tools libopenslide0 && rm -rf /var/lib/apt/lists/*
#RUN pip install --no-cache-dir "large-image[openslide]" large-image-source-gdal large-image-source-tiff large-image-converter

ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH=$JAVA_HOME/bin:$PATH

# Create a working directory
WORKDIR /workspace

# Add /lib to the python path
ENV PYTHONPATH=/workspace

# Upgrade pip, wheel, setuptools
RUN pip install --no-cache-dir --upgrade pip wheel setuptools

# Install openslide-python via pip to avoid compatibility issues
#RUN pip install --no-cache-dir gdal pandas openslide-python
RUN conda install -y -c conda-forge gdal pandas openslide-python

# Install large_image and its dependencies via pip to avoid compatibility issues
RUN pip install --no-cache-dir \
    large-image \
    large-image-source-openslide \
    large-image-source-gdal \
    large-image-source-tiff \
    large-image-converter


# Install GDAL and large_image with conda to avoid compatibility issues
#RUN conda install -y -c conda-forge gdal wheel pandas openslide-python # added openslide-python (not tested)
#RUN conda install -c conda-forge large-image
#RUN conda install -c conda-forge large-image-source-gdal
#RUN conda install -c conda-forge large-image-source-tiff
#RUN conda install -c conda-forge large-image-converter

# Install Python dependencies
#RUN pip install --no-cache-dir large-image-source-openslide # added this line (not tested)

# Copy environment and requirements
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt


# Copy project files
#RUN mkdir -p /lib
COPY ./lib/ ./lib/
#RUN mkdir -p /data
#COPY ./data/ /data/
#RUN mkdir -p /hibou-L
#COPY ./hibou-L/ /hibou-L/

# Copy scripts
COPY read_cell_detections_perform_clustering.py config.yaml ./

# Expose Jupyter port (optional, if you plan to use notebooks inside container)
EXPOSE 8888

# Run script
CMD ["python", "-u", "read_cell_detections_perform_clustering.py", "-config", "config.yaml", "-output", "data", "-model", "hibou-L", "-wsi", "data/TCGA-V5-A7RE-11A-01-TS1.57401526-EF9E-49AC-8FF6-B4F9652311CE.svs", "-anno", "data/debug_cells.geojson"]